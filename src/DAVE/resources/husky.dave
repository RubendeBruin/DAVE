# auto generated pyhton code
# By beneden
# Time: 2019-10-31 20:02:19 UTC

# To be able to distinguish the important number (eg: fixed positions) from
# non-important numbers (eg: a position that is solved by the static solver) we use a dummy-function called 'solved'.
# For anything written as solved(number) that actual number does not influence the static solution
def solved(number):
    return number

# code for Husky
s.new_rigidbody(name='Husky',
                mass=8000.0,
                cog=(38.0,
                     0.0,
                     9.0),
                position=(0.0,
                          0.0,
                          solved(-5.582773424580062)),
                rotation=(solved(0.022627098474188267),
                          solved(-0.36240844461231014),
                          0.0),
                fixed =False )
# code for Husky Buoyancy mesh
mesh = s.new_buoyancy(name='Husky Buoyancy mesh',
          parent='Husky')
mesh.trimesh.load_obj(s.get_resource_path(r'buoyancy husky.obj'), scale = (1.0,1.0,1.0), rotation = (0.0,0.0,0.0), offset = (0.0,0.0,0.0))
# code for Karmfork
s.new_point(name='Karmfork',
          parent='Husky',
          position=(2.0,
                    0.0,
                    7.0))
# code for Husky Visual
s.new_visual(name='Husky Visual',
            parent='Husky',
            path=r'visual vessel husky.obj',
            offset=(0.0, 0.0, 0.0), 
            rotation=(0.0, 0.0, 0.0), 
            scale=(1, 1, 1) )
s["Husky"].inertia_radii = (10,30,30.0)
s.new_waveinteraction('WaveInteraction', parent = 'Husky', path = r'husky.dhyd')
s['WaveInteraction'].offset = (40.0, 0.0, 3.5)

s.new_frame('Husky_target')
s.new_linear_connector_6d('Husky_pos_springs', main = 'Husky_target', secondary = 'Husky')
s['Husky_pos_springs'].stiffness = (100.0, 100.0, 0.0, 1.0, 1.0, 10.0)
